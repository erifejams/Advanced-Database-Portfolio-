drop table events_attended;
drop table locations;
drop table events;
drop table club_members;



CREATE TABLE club_members(
    member_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NULL,
    last_name VARCHAR2(50) NULL,
    full_part CHAR(1) NULL,
    join_date DATE NULL,
    email VARCHAR2(100) NULL
);


CREATE TABLE locations(
    location_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_name VARCHAR2(50) NULL
);

CREATE TABLE events(
    event_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_name VARCHAR2(50) NULL,
    event_date DATE NULL,
    location INT NULL
);

ALTER TABLE events ADD CONSTRAINT FK_events FOREIGN KEY(location) REFERENCES locations(location_id);

CREATE TABLE events_attended(
    event_id INT NULL,
    member_id INT NULL
	-- CAUSE IT USES THE PRIMARY KEYS OF OTHER TABLE 
);
ALTER TABLE events_attended ADD CONSTRAINT events_attended_pk PRIMARY KEY(event_id, member_id);

-- Insert into locations table
insert /*+ APPEND */ into locations
select rownum, 'room'||rownum
from dual
connect by level <= 50;

-- Insert into the events table
insert /*+ APPEND */ into events
select rownum, 'event'||rownum, sysdate-720+mod(rownum,500), dbms_random.value(1,50)
from dual
connect by level <= 200;

-- Insert into the events_attended table
insert /*+ APPEND */ into events_attended
select dbms_random.value(1,100),  dbms_random.value(1,600)
from dual
connect by level <= 200;


--SELECT * FROM events_attended -- TO REMOVE ALL THE ONES THAT DON'T MATCH
ALTER TABLE club_members ADD CONSTRAINT PK_club_members PRIMARY KEY(member_id)
--ALTER TABLE locations ADD CONSTRAINT PK_locations PRIMARY KEY(location_id)
ALTER TABLE events ADD CONSTRAINT PK_events PRIMARY KEY(event_id)
--ALTER TABLE events_attended ADD CONSTRAINTS events_attended_pk ADD PRIMARY KEY(event_id, member_id);
--ALTER TABLE events_attended ADD PRIMARY KEY(event_id, member_id);

EXPLAIN PLAN FOR 
SELECT events_attended.member_id, events.location, locations.location_id, club_members.member_id, events.event_id, events_attended.event_id
FROM club_members
LEFT JOIN events_attended ON club_members.member_id =  events_attended.member_id 
LEFT JOIN events ON events_attended.event_id = events.event_id
LEFT JOIN locations ON events.location = locations.location_id
WHERE events_attended.member_id IS NOT NULL AND club_members.member_id IS NOT NULL -- TO REMOVE ALL THE ONES THAT DON'T MATCH
ORDER BY  events_attended.member_id, club_members.member_id, locations.location_id, events.location;
select PLAN_TABLE_OUTPUT from TABLE (DBMS_XPLAN.DISPLAY());